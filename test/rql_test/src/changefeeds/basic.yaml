desc: Test basic changefeed operations
table_variable_name: tbl
tests:
    
    # Fill in some data
    - cd: tbl.insert([{'id':1}, {'id':2}, {'id':3}, {'id':4}, {'id':5}, {'id':6}])
      rb: tbl.insert([{'id' => 1}, {'id'=>2}, {'id'=>3}, {'id'=>4}, {'id'=>5}, {'id'=>6}])
      ot: ({'skipped':0, 'deleted':0, 'unchanged':0, 'errors':0, 'replaced':0, 'inserted':6})
    
    # Start changefeed watchers
    - cd: all_changes = tbl.changes().limit(4)
    - py: even_changes = tbl.changes().filter((r.row['new_val']['id'] % 2).eq(0)).limit(2)
      rb: even_changes = tbl.changes().filter{ |row| (row['new_val']['id'] % 2).eq(0)}.limit(2)
      js: even_changes = tbl.changes().filter(r.row('new' + '_' + 'val')('id').mod(2).eq(0)).limit(2)
    
    # Insert more than the watchers are waiting for
    - cd: tbl.insert([{'id':7}, {'id':8}, {'id':9}, {'id':10}])
      rb: tbl.insert([{'id'=>7}, {'id'=>8}, {'id'=>9}, {'id' => 10}])
      ot: ({'skipped':0, 'deleted':0, 'unchanged':0, 'errors':0, 'replaced':0, 'inserted':4})
    
    # Check that our limited watchers have been satified
    - ot: [7, 8, 9, 10]
      py: "sorted([x['new_val']['id'] for x in all_changes])"
      rb: (all_changes.map { |x| x['new_val']['id'] }).sort
      js:
        cd: all_changes
        testopts:
            rowfilter: return input['new' + '_' + 'val'].id
            # note: the underscore causes our re-writer to kick in
            arrayfilter: return input.sort(function(a, b){return a-b})
      testopts:
        reql-query: False
      
    - ot: [8, 10]
      py: "sorted([x['new_val']['id'] for x in even_changes])"
      rb: (even_changes.map { |x| x['new_val']['id'] }).sort
      js:
        cd: even_changes
        testopts:
            rowfilter: return input['new' + '_' + 'val'].id
            # note: the underscore causes our re-writer to kick in
            arrayfilter: return input.sort(function(a, b){return a-b})
      testopts:
        reql-query: False
